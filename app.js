/* JS with BGG sync (LAB391), no AI */
const BGG_USERNAME = 'LAB391';
const PROXY = 'https://api.allorigins.win/raw?url=';
const $ = (s,el=document)=>el.querySelector(s);
const $$ = (s,el=document)=>Array.from(el.querySelectorAll(s));
const storage={get(k,f){try{return JSON.parse(localStorage.getItem(k))??f}catch{return f}},set(k,v){localStorage.setItem(k,JSON.stringify(v))}};
const state={library:storage.get('bgh.library',[]),tables:storage.get('bgh.tables',[]),settings:storage.get('bgh.settings',{theme:'system'}),recentTables:storage.get('bgh.recent',[]),turns:storage.get('bgh.turns',{order:[],currentIndex:-1}),victoryNotes:storage.get('bgh.victory','')};
function saveAll(){ storage.set('bgh.library',state.library); storage.set('bgh.tables',state.tables); storage.set('bgh.settings',state.settings); storage.set('bgh.recent',state.recentTables); storage.set('bgh.turns',state.turns); storage.set('bgh.victory',state.victoryNotes); }
function applyTheme(){ document.documentElement.classList.remove('theme-light','theme-dim','theme-solar'); const t=state.settings.theme||'system'; if(t==='light')document.documentElement.classList.add('theme-light'); if(t==='dim')document.documentElement.classList.add('theme-dim'); if(t==='solar')document.documentElement.classList.add('theme-solar'); }
applyTheme(); $('#year').textContent = new Date().getFullYear();
$$('.tab').forEach(b=>b.addEventListener('click',()=>{ $$('.tab').forEach(x=>x.classList.remove('active')); b.classList.add('active'); $$('.view').forEach(v=>v.classList.remove('active')); $('#'+b.dataset.tab).classList.add('active'); }));
$('#go-scorekeeper')?.addEventListener('click',()=>{$('[data-tab=\"scorekeeper\"]').click()});
function refreshDashboard(){ const sel=$('#dashboardGameSelect'); sel.innerHTML = state.library.map(g=>`<option value=\"${g.id}\">${g.name}</option>`).join('')||'<option value=\"\">No games yet</option>'; const recentUl=$('#recentTables'); recentUl.innerHTML = state.recentTables.slice(-5).reverse().map(t=>`<li>${t.name} — ${new Date(t.date).toLocaleString()}</li>`).join('')||'<li>No recent tables</li>'; const selectedId=sel.value||state.library[0]?.id||''; const game=state.library.find(g=>g.id===selectedId); const rules=game?.link||''; const rulesBtn=$('#open-rules'); if(rulesBtn){ if(rules){ rulesBtn.href=rules; rulesBtn.style.display='inline-flex'; } else { rulesBtn.href='#'; rulesBtn.style.display='none'; } } }
refreshDashboard();
$('#dashboardGameSelect')?.addEventListener('change', refreshDashboard);
$('#use-selected-game')?.addEventListener('click', ()=>{ const id=$('#dashboardGameSelect').value; if(!id) return alert('No game selected'); useGameInScorekeeper(id); });
const defaultTable=()=>({id:crypto.randomUUID(),name:'New Table',created:Date.now(),rows:[],rounds:[],history:[]});
let currentTable=state.tables[0]||defaultTable(); if(state.tables.length===0){ state.tables.push(currentTable); saveAll(); }
function renderScoreTable(){ $('#tableName').value=currentTable.name; const grid=$('#scoreGrid'); const headers=['Player/Team',...currentTable.rounds.map((_,i)=>`R${i+1}`),'Total','Actions']; const table=document.createElement('table'); table.className='score-table'; table.innerHTML=`<thead><tr>${headers.map(h=>`<th>${h}</th>`).join('')}</tr></thead><tbody></tbody>`; const tbody=table.querySelector('tbody'); currentTable.rows.forEach((row,idx)=>{ const total=row.scores.reduce((a,b)=>a+(b||0),0); const tr=document.createElement('tr'); tr.innerHTML=`<td><input data-row=\"${idx}\" class=\"name\" value=\"${row.name}\"></td>${currentTable.rounds.map((_,i)=>`<td><input data-row=\"${idx}\" data-col=\"${i}\" class=\"score\" type=\"number\" value=\"${row.scores[i]??''}\"></td>`).join('')}<td class=\"total\">${total}</td><td><button class=\"btn\" data-act=\"add\" data-idx=\"${idx}\">+ Round</button><button class=\"btn\" data-act=\"del\" data-idx=\"${idx}\">Remove</button></td>`; tbody.appendChild(tr); }); grid.innerHTML=''; grid.appendChild(table); $$('.name',grid).forEach(inp=>inp.addEventListener('input',e=>{ const r=+e.target.dataset.row; currentTable.rows[r].name=e.target.value; pushHistory(`Rename row ${r+1} to \"${e.target.value}\"`); saveAll(); })); $$('.score',grid).forEach(inp=>inp.addEventListener('input',e=>{ const r=+e.target.dataset.row,c=+e.target.dataset.col; currentTable.rows[r].scores[c]=parseInt(e.target.value||0,10); pushHistory(`Set R${c+1} — ${currentTable.rows[r].name}: ${e.target.value}`); saveAll(); renderScoreTable(); })); $$('button[data-act=\"add\"]',grid).forEach(b=>b.addEventListener('click',e=>{ const idx=+e.target.dataset.idx; ensureRounds(currentTable.rounds.length+1); currentTable.rows[idx].scores.push(0); pushHistory(`Add round for ${currentTable.rows[idx].name}`); saveAll(); renderScoreTable(); })); $$('button[data-act=\"del\"]',grid).forEach(b=>b.addEventListener('click',e=>{ const idx=+e.target.dataset.idx; pushHistory(`Remove row ${currentTable.rows[idx].name}`); currentTable.rows.splice(idx,1); saveAll(); renderScoreTable(); })); $('#historyLog').textContent=currentTable.history.slice(-100).join('\\n'); }
function pushHistory(line){ currentTable.history.push(`[${new Date().toLocaleTimeString()}] ${line}`); }
function ensureRounds(n){ while(currentTable.rounds.length<n){ currentTable.rounds.push({}); } currentTable.rows.forEach(r=>{ while(r.scores.length<currentTable.rounds.length) r.scores.push(0); }); }
$('#tableName').addEventListener('input',e=>{ currentTable.name=e.target.value; saveAll(); });
$('#addPlayer').addEventListener('click',()=>{ currentTable.rows.push({name:`Player ${currentTable.rows.length+1}`,scores:Array(currentTable.rounds.length).fill(0)}); pushHistory('Add player'); saveAll(); renderScoreTable(); });
$('#addTeam').addEventListener('click',()=>{ currentTable.rows.push({name:`Team ${currentTable.rows.length+1}`,scores:Array(currentTable.rounds.length).fill(0)}); pushHistory('Add team'); saveAll(); renderScoreTable(); });
$('#newRound').addEventListener('click',()=>{ ensureRounds(currentTable.rounds.length+1); pushHistory('New round added'); saveAll(); renderScoreTable(); });
$('#undo').addEventListener('click',()=>{ alert('Tip: Export often. Undo is limited in this version.'); });
$('#exportTable').addEventListener('click',()=>{ const data=JSON.stringify(currentTable,null,2); download('table.json',data); state.recentTables.push({name:currentTable.name,date:Date.now()}); saveAll(); refreshDashboard(); });
$('#importTable').addEventListener('change',async e=>{ const file=e.target.files[0]; if(!file) return; const text=await file.text(); try{ const obj=JSON.parse(text); currentTable=obj; const idx=state.tables.findIndex(t=>t.id===obj.id); if(idx>-1) state.tables[idx]=obj; else state.tables.push(obj); saveAll(); renderScoreTable(); }catch{ alert('Invalid table file'); } });
renderScoreTable();
function renderTurnList(){ const ol=$('#turnOrder'); ol.innerHTML=state.turns.order.map(n=>`<li>${n}</li>`).join('')||'<li class=\"muted\">Add players to begin</li>'; $('#currentTurn').textContent=state.turns.order[state.turns.currentIndex]??'No players yet'; }
$('#addTurnPlayer').addEventListener('click',()=>{ const name=$('#turnPlayerName').value.trim(); if(!name) return; state.turns.order.push(name); if(state.turns.currentIndex===-1) state.turns.currentIndex=0; $('#turnPlayerName').value=''; saveAll(); renderTurnList(); });
$('#clearTurnOrder').addEventListener('click',()=>{ state.turns.order=[]; state.turns.currentIndex=-1; saveAll(); renderTurnList(); });
$('#nextTurn').addEventListener('click',()=>{ if(state.turns.order.length===0) return; state.turns.currentIndex=(state.turns.currentIndex+1)%state.turns.order.length; saveAll(); renderTurnList(); });
renderTurnList();
let timerInterval=null,remaining=120,isRunning=false;
function updateTimeDisplay(){ const m=String(Math.floor(remaining/60)).padStart(2,'0'); const s=String(remaining%60).padStart(2,'0'); $('#timeDisplay').textContent=`${m}:${s}`; }
function setFromInputs(){ remaining=(parseInt($('#timerMinutes').value||0)*60)+parseInt($('#timerSeconds').value||0); updateTimeDisplay(); }
setFromInputs(); $('#timerMinutes').addEventListener('input', setFromInputs); $('#timerSeconds').addEventListener('input', setFromInputs);
$('#startTimer').addEventListener('click',()=>{ if(isRunning) return; isRunning=true; timerInterval=setInterval(()=>{ remaining--; if(remaining<=0){ remaining=0; clearInterval(timerInterval); isRunning=false; if($('#soundToggle').checked){ $('#beep').play(); } } updateTimeDisplay(); },1000); });
$('#pauseTimer').addEventListener('click',()=>{ clearInterval(timerInterval); isRunning=false; });
$('#resetTimer').addEventListener('click',()=>{ clearInterval(timerInterval); isRunning=false; setFromInputs(); });
$('#saveVictoryNotes').addEventListener('click',()=>{ state.victoryNotes=$('#victoryNotes').value; saveAll(); alert('Saved.'); });
$('#victoryNotes').value = state.victoryNotes || '';
$('#rollDice').addEventListener('click',()=>{ const sides=Math.max(2,parseInt($('#diceSides').value||6)); const count=Math.max(1,parseInt($('#diceCount').value||1)); const rolls=Array.from({length:count},()=>1+Math.floor(Math.random()*sides)); $('#diceResults').textContent=`Rolls: ${rolls.join(', ')}  |  Sum: ${rolls.reduce((a,b)=>a+b,0)}`; });
$('#flipCoin').addEventListener('click',()=>{ $('#coinResult').textContent=Math.random()<0.5?'Heads':'Tails'; });
let deck=[],discards=[]; function makeDeck(){ const suits=['♠','♥','♦','♣'],ranks=['A','2','3','4','5','6','7','8','9','10','J','Q','K']; deck=[]; suits.forEach(s=>ranks.forEach(r=>deck.push(`${r}${s}`))); discards=[]; } function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]]; } }
$('#newDeck').addEventListener('click',()=>{ makeDeck(); $('#cardResult').textContent='New deck ready.'; }); $('#shuffleDeck').addEventListener('click',()=>{ shuffle(deck); $('#cardResult').textContent='Shuffled.'; }); $('#drawCard').addEventListener('click',()=>{ if(deck.length===0) return $('#cardResult').textContent='Deck empty.'; const c=deck.pop(); discards.push(c); $('#cardResult').textContent=c+` (${deck.length} left)`; }); makeDeck();
async function fetchBGGCollection(username){ const url=`https://boardgamegeek.com/xmlapi2/collection?username=${encodeURIComponent(username)}&own=1&excludesubtype=boardgameexpansion&stats=1`; const proxied=PROXY+encodeURIComponent(url); for(let i=0;i<8;i++){ const res=await fetch(proxied,{cache:'no-cache'}); const text=await res.text(); if(text.includes('Your request for this collection has been accepted')){ await new Promise(r=>setTimeout(r,1500)); continue; } return text; } throw new Error('BGG timed out. Try Refresh again.'); }
function parseCollectionXML(xml){ const doc=new DOMParser().parseFromString(xml,'text/xml'); const items=Array.from(doc.querySelectorAll('items > item')); return items.map(it=>({ id:it.getAttribute('objectid'), name:it.querySelector('name')?.textContent||'Unknown', year:it.querySelector('yearpublished')?.textContent||'', image:it.querySelector('thumbnail')?.textContent||'', rating:it.querySelector('stats rating')?.getAttribute('value')||'', minPlayers:it.querySelector('stats')?.getAttribute('minplayers')||'', maxPlayers:it.querySelector('stats')?.getAttribute('maxplayers')||'', playtime:it.querySelector('stats')?.getAttribute('playingtime')||'', link:`https://boardgamegeek.com/boardgame/${it.getAttribute('objectid')}` })); }
async function enrichWithThings(ids){ if(ids.length===0) return {}; const chunks=[]; for(let i=0;i<ids.length;i+=50) chunks.push(ids.slice(i,i+50)); const result={}; for(const chunk of chunks){ const url=`https://boardgamegeek.com/xmlapi2/thing?stats=1&id=${chunk.join(',')}`; const proxied=PROXY+encodeURIComponent(url); const xml=await (await fetch(proxied,{cache:'no-cache'})).text(); const doc=new DOMParser().parseFromString(xml,'text/xml'); Array.from(doc.querySelectorAll('items > item')).forEach(it=>{ const id=it.getAttribute('id'); const img=it.querySelector('image')?.textContent||''; const min=it.querySelector('minplayers')?.getAttribute('value')||''; const max=it.querySelector('maxplayers')?.getAttribute('value')||''; const play=it.querySelector('playingtime')?.getAttribute('value')||''; result[id]={image:img,minPlayers:min,maxPlayers:max,playtime:play}; }); } return result; }
async function syncFromBGG(){ try{ $('#refreshBGG').disabled=true; $('#refreshBGG').textContent='Syncing…'; const xml=await fetchBGGCollection(BGG_USERNAME); let items=parseCollectionXML(xml); const details=await enrichWithThings(items.map(x=>x.id)); items=items.map(x=>({...x,...details[x.id]})); state.library = items.map(x=>({ id:x.id, name:x.name, minPlayers:parseInt(x.minPlayers||'1',10)||1, maxPlayers:parseInt(x.maxPlayers||'4',10)||4, playtime:parseInt(x.playtime||'60',10)||60, tags:'BGG', link:x.link, notes:'' })); saveAll(); renderLibrary(); refreshDashboard(); }catch(err){ alert('BGG sync error: '+String(err)); } finally { $('#refreshBGG').disabled=false; $('#refreshBGG').textContent='Refresh from BGG'; } }
function renderLibrary(list=state.library){ const q=$('#librarySearch').value?.toLowerCase().trim(); const filtered=list.filter(g=>!q||g.name.toLowerCase().includes(q)||(g.tags||'').toLowerCase().includes(q)); const wrap=$('#gameList'); wrap.innerHTML = filtered.map(g=>`<article class=\"card game\" data-game-id=\"${g.id}\"><header style=\"display:flex; justify-content:space-between; align-items:center; gap:10px;\"><h3>${g.name}</h3><div class=\"actions\"><button class=\"btn\" data-use=\"${g.id}\">Use in Scorekeeper</button>${g.link?`<a class=\"btn\" href=\"${g.link}\" target=\"_blank\" rel=\"noopener\">BGG</a>`:''}</div></header><p class=\"muted\">${g.minPlayers}-${g.maxPlayers} players • ~${g.playtime} min • ${g.tags||'BGG'}</p></article>`).join('')||'<p class=\"muted\">No games yet.</p>'; $$('[data-use]').forEach(b=>b.addEventListener('click',()=>useGameInScorekeeper(b.dataset.use))); }
function useGameInScorekeeper(id){ const game=state.library.find(x=>x.id===id); if(!game) return; currentTable=defaultTable(); currentTable.name=`${game.name} — New Table`; state.tables.push(currentTable); saveAll(); renderScoreTable(); $('[data-tab=\"scorekeeper\"]').click(); const sel=$('#dashboardGameSelect'); if(sel){ sel.value=id; refreshDashboard(); } }
$('#exportLibrary').addEventListener('click',()=>download('library.json',JSON.stringify(state.library,null,2)));
$('#librarySearch').addEventListener('input',()=>renderLibrary());
$('#refreshBGG').addEventListener('click',()=>syncFromBGG());
syncFromBGG();
$('#themeSelect').value=state.settings.theme||'system';
$('#themeSelect').addEventListener('change',e=>{ state.settings.theme=e.target.value; saveAll(); applyTheme(); });
$('#exportAll').addEventListener('click',()=>{ const data=JSON.stringify(state,null,2); download('boardgame-helper-backup.json',data); });
$('#importAll').addEventListener('change',async e=>{ const f=e.target.files[0]; if(!f) return; try{ const obj=JSON.parse(await f.text()); Object.assign(state,obj); saveAll(); location.reload(); }catch{ alert('Invalid backup file'); } });
$('#wipeAll').addEventListener('click',()=>{ if(confirm('This clears local data (library, tables, notes). Continue?')){ localStorage.clear(); location.reload(); } });
function download(filename,text){ const a=document.createElement('a'); a.href='data:application/json;charset=utf-8,'+encodeURIComponent(text); a.download=filename; a.style.display='none'; document.body.appendChild(a); a.click(); a.remove(); }
document.addEventListener('keydown',e=>{ if(e.key==='/' && !['INPUT','TEXTAREA'].includes(document.activeElement.tagName)){ e.preventDefault(); $('#librarySearch').focus(); } });
